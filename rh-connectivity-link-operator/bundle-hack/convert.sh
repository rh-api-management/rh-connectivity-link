#!/bin/bash

set -o xtrace
set -o errexit
#set -o pipefail

#replica of tree comand using find and sed
function tree() {
  find ${1:-.} | sed -e "s/[^-][^\/]*\//  |/g" -e "s/|\([^ ]\)/|-\1/"
}

# Set magic variables for current file & dir
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

EXPECTED_ENV_VARS=(CHANNEL OPERATOR_CONTAINER_IMAGE METADATA_DESCRIPTION NAME DISPLAY_NAME WASM_SHIM_IMAGE RHCL_CONSOLE_PLUGIN_IMAGE DOC_URL CSV_VERSION VALID_SUBSCRIPTION)

source $__dir/rhcl-operator.properties

for var in "${EXPECTED_ENV_VARS[@]}"
do
    if [[ -z "${!var}" ]]
    then
      echo "$var not defined or empty"
      exit 1
    fi
    # extend scope to subshells
    # shellcheck disable=SC2163
    export "${var}"

done

# Check required and mutually exclusive envvars
if [ -z "${REPLACES}" ] && [ -z "${SKIP_RANGE}" ] && [ -z "${FIRST_RELEASE}" ]; then
  echo "one of REPLACES or SKIP_RANGE or FIRST_RELEASE envvar is expected"
  exit 1
fi

if [ -n "${REPLACES}" ] && [ -n "${SKIP_RANGE}" ] && [ -n "${FIRST_RELEASE}" ]; then
  echo "only one of REPLACES or SKIP_RANGE or FIRST_RELEASE envvar can be set"
  exit 1
fi

# Upstream bundle dir
SOURCE_BUNDLE_DIR="bundle"
# Output bundle dir with autogenerated bundles
OUTPUT_DIR="bundle-hack"

# Clean up
# Useful to delete existing files not longer needed.
if [ -d "$OUTPUT_DIR" ]; then rm -Rf $OUTPUT_DIR/manifests; rm -Rf $OUTPUT_DIR/bundle; rm -Rf $OUTPUT_DIR/metadata; fi
mkdir -p $OUTPUT_DIR

tree
cp -vr "$SOURCE_BUNDLE_DIR/manifests" "$OUTPUT_DIR/"
mv "$OUTPUT_DIR/manifests" "$OUTPUT_DIR/bundle"
cp -vr "$SOURCE_BUNDLE_DIR/metadata" "$OUTPUT_DIR"

# Using ${YQ} 4.8 in development

# metadata/annotations.yaml
ANNOTATIONS_RESOURCE=$OUTPUT_DIR/metadata/annotations.yaml
${YQ} eval '.annotations."operators.operatorframework.io.bundle.channels.v1" = strenv(CHANNEL)' -i $ANNOTATIONS_RESOURCE
${YQ} eval '.annotations."operators.operatorframework.io.bundle.package.v1" = "rhcl-operator"' -i $ANNOTATIONS_RESOURCE
${YQ} eval '.annotations."operators.operatorframework.io.bundle.channel.default.v1" = strenv(CHANNEL)' -i $ANNOTATIONS_RESOURCE
${YQ} eval '.annotations."com.redhat.openshift.versions" = "v4.16-v4.17"' -i $ANNOTATIONS_RESOURCE
${YQ} eval 'del(.annotations."operators.operatorframework.io.test.config.v1")' -i $ANNOTATIONS_RESOURCE
${YQ} eval 'del(.annotations."operators.operatorframework.io.test.mediatype.v1")' -i $ANNOTATIONS_RESOURCE

# metadata/dependencies.yaml for 1.0.1, authorino-operator, limitador-operator and dns-operator dependency versions
DEPENDENCIES_RESOURCE=$OUTPUT_DIR/metadata/dependencies.yaml
${YQ} eval '.dependencies.[0].value.version = "0.16.1"' -i $DEPENDENCIES_RESOURCE
${YQ} eval '.dependencies.[1].value.version = strenv(0.0.1)' -i $DEPENDENCIES_RESOURCE
${YQ} eval '.dependencies.[2].value.version = strenv(0.0.1)' -i $DEPENDENCIES_RESOURCE

# bundle/rhcl-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml
# NOOP


# bundle/rhcl-operator.clusterserviceversion.yaml
CSV_RESOURCE=$OUTPUT_DIR/bundle/kuadrant-operator.clusterserviceversion.yaml
${YQ} eval '.metadata.annotations.containerImage = strenv(OPERATOR_CONTAINER_IMAGE)' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations.description = strenv(METADATA_DESCRIPTION)' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations.tectonic-visibility = "ocs"' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations."operators.openshift.io/valid-subscription" = strenv(VALID_SUBSCRIPTION)' -i $CSV_RESOURCE
${YQ} eval '.metadata.name = strenv(NAME)' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations."features.operators.openshift.io/disconnected" = "false"' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations."features.operators.openshift.io/fips-compliant" = "false"' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations."features.operators.openshift.io/proxy-aware" = "false"' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations."features.operators.openshift.io/tls-profiles" = "false"' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations."features.operators.openshift.io/token-auth-aws" = "false"' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations."features.operators.openshift.io/token-auth-azure" = "false"' -i $CSV_RESOURCE
${YQ} eval '.metadata.annotations."features.operators.openshift.io/token-auth-gcp" = "false"' -i $CSV_RESOURCE
if [ -n "${FIRST_RELEASE}" ]; then
  ${YQ} eval 'del(.spec.replaces)' -i $CSV_RESOURCE
  ${YQ} eval 'del(.metadata.annotations."olm.skipRange")' -i $CSV_RESOURCE
fi
if [ -n "${SKIP_RANGE}" ]; then
  export SKIP_RANGE
  ${YQ} eval '.metadata.annotations."olm.skipRange" = strenv(SKIP_RANGE)' -i $CSV_RESOURCE
  ${YQ} eval 'del(.spec.replaces)' -i $CSV_RESOURCE
fi
if [ -n "${REPLACES}" ]; then
  export REPLACES
  ${YQ} eval '.spec.replaces = strenv(REPLACES)' -i $CSV_RESOURCE
  ${YQ} eval 'del(.metadata.annotations."olm.skipRange")' -i $CSV_RESOURCE
fi
DESCRIPTION=$(cat "$__dir/DESCRIPTION") ${YQ} eval '.spec.description = strenv(DESCRIPTION)' -i $CSV_RESOURCE
${YQ} eval '.spec.displayName = strenv(DISPLAY_NAME)' -i $CSV_RESOURCE
ICON=$(cat "$__dir/ICON") ${YQ} eval '.spec.icon[0].base64data = strenv(ICON)' -i $CSV_RESOURCE
${YQ} eval '.spec.install.spec.deployments[0].spec.template.spec.containers[0].name = "manager"' -i $CSV_RESOURCE
${YQ} eval '.spec.install.spec.deployments[0].spec.template.spec.containers[0].image = strenv(OPERATOR_CONTAINER_IMAGE)' -i $CSV_RESOURCE
${YQ} eval '.spec.install.spec.deployments[0].spec.template.spec.containers[0].env[0].name = "RELATED_IMAGE_WASMSHIM"' -i $CSV_RESOURCE
${YQ} eval '.spec.install.spec.deployments[0].spec.template.spec.containers[0].env[0].value = strenv(WASM_SHIM_IMAGE)' -i $CSV_RESOURCE
${YQ} eval '.spec.install.spec.deployments[0].spec.template.spec.containers[0].env[1].name = "RELATED_IMAGE_CONSOLEPLUGIN"' -i $CSV_RESOURCE
${YQ} eval '.spec.install.spec.deployments[0].spec.template.spec.containers[0].env[1].value = strenv(RHCL_CONSOLE_PLUGIN_IMAGE)' -i $CSV_RESOURCE
${YQ} eval '.spec.links[0].name = "GitHub"' -i $CSV_RESOURCE
${YQ} eval '.spec.links[0].url = "https://github.com/kuadrant/kuadrant-operator"' -i $CSV_RESOURCE
${YQ} eval '.spec.links[1].name = "Documentation"' -i $CSV_RESOURCE
${YQ} eval '.spec.links[1].url = strenv(DOC_URL)' -i $CSV_RESOURCE
# Intentionally unset the relatedImages array to ensure no matter what is
# in upstream, we do not set the section as so digest pinning OSBS mechanism is run
${YQ} eval 'del(.spec.relatedImages)' -i $CSV_RESOURCE
${YQ} eval '.spec.version = strenv(CSV_VERSION)' -i $CSV_RESOURCE
# Pretty print the array to have consistent formatting everywhere
${YQ} eval --prettyPrint -i $CSV_RESOURCE

